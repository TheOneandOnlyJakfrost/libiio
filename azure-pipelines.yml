trigger:
  branches:
    include:
    - main
    - master
    - staging/*
    - 20*
  tags:
    include:
    - v*

pr:
- main
- master
- 20*

stages:
- stage: Builds
  jobs:
  - job: LinuxBuilds
    strategy:
      matrix:
        centos_7_x86_64:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'centos_docker'
          OS_VERSION: centos7
          artifactName: 'Linux-CentOS-7-x86_64'
        centos_8_x86_64:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'centos_docker'
          OS_VERSION: centos8
          artifactName: 'Linux-CentOS-8-x86_64'
        ubuntu_16_04_x86_64:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'ubuntu_docker'
          OS_VERSION: xenial
          artifactName: 'Linux-Ubuntu-16.04-x86_64'
        ubuntu_18_04_x86_64:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'ubuntu_docker'
          OS_VERSION: bionic
          artifactName: 'Linux-Ubuntu-18.04-x86_64'
        ubuntu_20_04_x86_64:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'ubuntu_docker'
          OS_VERSION: focal
          artifactName: 'Linux-Ubuntu-20.04-x86_64'
          CHECK_AGAINST_KERNEL_HEADER: 1
        debian_buster_arm32v7:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'arm32v7/debian_docker'
          OS_VERSION: 'buster'
          artifactName: 'Linux-Debian-Buster-ARM'
        debian_buster_arm64v8:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'arm64v8/debian_docker'
          OS_VERSION: 'buster'
          artifactName: 'Linux-Debian-Buster-ARM64'
        doxygen:
          imageName: 'ubuntu-latest'
          OS_TYPE: 'doxygen'
          OS_VERSION: focal
          artifactName: 'Libiio-documentation'
          CI_BUILD_SPHINX_DOCS: 1
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
      persistCredentials: true
    - script: ./CI/travis/before_install_linux
      displayName: "Install Dependencies"
    - script: ./CI/travis/make_linux
      displayName: "Build"
    - task: CopyFiles@2
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['CI_BUILD_SPHINX_DOCS'], '1'))
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/'
        contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['CI_BUILD_SPHINX_DOCS'], '1'))
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  - job: macOSBuilds
    strategy:
      matrix:
        macOS_10_15:
          imageName: 'macOS-10.15'
          artifactName: 'macOS-10.15'
        macOS_11:
          imageName: 'macOS-11'
          artifactName: 'macOS-11'
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - script: ./CI/travis/before_install_darwin
      displayName: "Install Dependencies"
    - script: ./CI/travis/make_darwin
      displayName: "Build"
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build/'
        contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build_tar/'
        contents: '$(Agent.BuildDirectory)/s/build_tar/?(*.gz)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

  - job: WindowsBuilds
    strategy:
      matrix:
        VS2019_Win32:
          imageName: 'windows-2019'
          COMPILER: 'Visual Studio 16 2019'
          ARCH: 'Win32'
          artifactName: 'Windows-VS-16-2019-Win32'
        VS2019_Win64:
          imageName: 'windows-2019'
          COMPILER: 'Visual Studio 16 2019'
          ARCH: 'x64'
          artifactName: 'Windows-VS-16-2019-x64'
    pool:
      vmImage: $[ variables['imageName'] ]
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: .\CI\install_deps_win.ps1
      displayName: Dependencies
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: .\CI\build_win.ps1
      displayName: Build
    - task: CopyFiles@2
      displayName: 'Copy libraries'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/Release'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy iio.h header'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/'
        contents: 'iio.h'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy .exe files'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/tests/Release'
        contents: '*.exe'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy .tar.gz files'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/bindings/python'
        contents: '*.gz'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy libiio-sharp.dll file'
      inputs:
        sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/bindings/csharp'
        contents: 'libiio-sharp.dll'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PowerShell@2
      displayName: 'Copy dependencies'
      inputs:
        targetType: 'filePath'
        filePath: .\CI\publish_deps.ps1
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

- stage: PushArtifacts
  dependsOn: Builds
  jobs:
  - job: GenerateSetupExe
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          path: '$(Build.ArtifactStagingDirectory)'
      - task: PowerShell@2
        inputs:
          targetType: 'filePath'
          filePath: .\CI\generate_exe.ps1
        displayName: "Generate libiio-setup.exe"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'Libiio-Setup-Exe'
  - job: PushToSWDownloads
    #dependsOn: GenerateSetupExe
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          path: '$(Build.ArtifactStagingDirectory)'
      - script: |
              cd $(Build.ArtifactStagingDirectory)
              zip -r ./Windows-VS-16-2019-Win32.zip ./Windows-VS-16-2019-Win32
              rm -r ./Windows-VS-16-2019-Win32
              zip -r ./Windows-VS-16-2019-x64.zip ./Windows-VS-16-2019-x64
              rm -r ./Windows-VS-16-2019-x64
        displayName: "Archive windows artifacts"
      - bash: ./CI/travis/prepare_assets.sh swdownloads_artifacts
        displayName: "Prepare artifacts for SWDownloads"
      - task: DownloadSecureFile@1
        name: key
        displayName: 'Download rsa key'
        inputs:
          secureFile: 'id_rsa'
      - bash: chmod 600 $(key.secureFilePath) ; scp -2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o HostKeyAlgorithms=+ssh-dss -i $(key.secureFilePath) -r /home/vsts/work/1/a/* $MAPPED_VAR
        env:
          MAPPED_VAR: $(SERVER_ADDRESS)
        displayName: "Push artifacts to SW Downloads"
  - job: PushToGithubRelease
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          path: '$(Build.ArtifactStagingDirectory)'
      - bash: ./CI/travis/prepare_assets.sh
        displayName: "Prepare assets for release"
      - task: GithubRelease@0
        displayName: 'Attach artifacts to GitHub Release'
        inputs:
          gitHubConnection: libiio-release
          repositoryName: $(Build.Repository.Name)
          action: create
          target: $(Build.SourceVersion)
          tag: $(Build.SourceBranchName)
          title: "Libiio release $(Build.SourceBranchName)"
          assets: $(Build.ArtifactStagingDirectory)/*
          addChangeLog: true
          isDraft: true
